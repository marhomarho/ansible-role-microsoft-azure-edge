# Copyright Â© 2018 VMware, Inc. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
---
# These tasks deploy an IoT Edge module.

- name: show edge to install
  debug:
    msg: "Deploying IoT Edge '{{ azure_edge_name }}'."

- name: incorporate collected facts from roles run at driver
  set_fact:
    azure_groups: "{{ hostvars['localhost']['azure_groups'] }}"
  when:
    - azure_groups is not defined
    - hostvars is defined
    - hostvars['localhost'] is defined
    - hostvars['localhost']['azure_groups'] is defined

- name: Include OS-specific tasks
  include_tasks: "{{ os_tasks }}"
  with_first_found:
    - files:
        - "{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml"
        - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_distribution }}.yml"
        - "{{ ansible_os_family }}.yml"
      skip: true
  loop_control:
    loop_var: os_tasks

- name: show edge details
  block:
    - debug:
        msg: "Configuring connection for IoT Edge '{{ azure_edge_name }}'."
    - debug:
        msg: "Connecting to hub '{{ azure_iot_hub_name }}'."
    - debug:
        msg: "Known edge facts: '{{ azure_groups }}'."
      no_log: true
  when: azure_groups is defined

- name: set edge device name
  set_fact:
    azure_edge_device_name: >-
      {{ azure_edge_name }}-edge
  when:
    - azure_edge_name is defined

- name: set the connection string from previously discovered values
  set_fact:
    connection_string_primary: "HostName=\
      {{ azure_iot_hub_name }}.azure-devices.net;\
      DeviceId={{ azure_edge_device_name }};\
      SharedAccessKey={{ azure_groups[azure_edge_name].primaryKey }}"
  no_log: true
  when:
    - azure_groups is defined
    - azure_edge_name in azure_groups

- name: Inject configuration parameters.
  replace:
    path: /etc/iotedge/config.yaml
    regexp: '^(\s+device_connection_string: ").*(")'
    replace: '\1{{ connection_string_primary }}\2'
  register: update_config
  when:
    - connection_string_primary is defined
    - ansible_distribution == 'Ubuntu'

- name: Restart service iotedge
  service:
    name: iotedge
    state: restarted
  when:
    - ansible_distribution == 'Ubuntu'
    - update_config.changed
  register: restart_iotedge1
  ignore_errors: true
  tags:
    - skip_ansible_lint

- name: Get logs if restart fails
  command: journalctl -xe -u iotedge --since "5 minutes ago" --no-pager
  when:
    - restart_iotedge1.failed is defined and restart_iotedge1.failed

- name: Restart service iotedge
  service:
    name: iotedge
    state: restarted
  register: restart_iotedge2_5
  retries: 4
  delay: 5
  until: not restart_iotedge2_5.failed
  when:
    - ansible_distribution == 'Ubuntu'
    - restart_iotedge1.failed is defined and restart_iotedge1.failed
